
# ここではループ処理を学びます。

# ループ処理を実現するには、Rubyにはいくつかの方法があります。
# その中でも、最も基本的なループ処理を実現する方法を学びます。

# 以下のものがあります。
# while
# until
# loop
# for

# ===== ===== ===== ===== =====

# while

# whileは、条件式が真の間、繰り返し処理を行います。

# whileの構文は以下のようになります。

# while 条件 do
#   処理
# end

# 例えば、以下のようなコードです。

i = 0
while i < 10 do
  puts i
  i += 1
end

# このコードは、0から9までの数字を出力します。

# このコードを実行すると、以下のようになります。

# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9

# ===== ===== ===== ===== =====

# until

# untilは、条件式が偽の間、繰り返し処理を行います。

# untilの構文は以下のようになります。

# until 条件 do
#   処理
# end

# 例えば、以下のようなコードです。

i = 0
until i == 10 do
  puts i
  i += 1
end

# このコードは、0から9までの数字を出力します。

# このコードを実行すると、以下のようになります。

# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9

# ===== ===== ===== ===== =====

# loop

# loopは、無限ループを行います。
# 中でbreakを使うことで、ループを抜けることができます。

# loopの構文は以下のようになります。

# loop do
#   処理
# end

# 例えば、以下のようなコードです。

i = 0
loop do
  puts i
  i += 1
  if i == 10
    break
  end
end

# このコードは、0から9までの数字を出力します。

# このコードを実行すると、以下のようになります。

# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9

# ===== ===== ===== ===== =====

# for

# forは、配列の要素を取り出して、繰り返し処理を行います。

# forの構文は以下のようになります。

# for 変数 in 配列 do
#   処理
# end

# 例えば、以下のようなコードです。

for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] do
  puts i
end

# このコードは、0から9までの数字を出力します。

# このコードを実行すると、以下のようになります。

# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
