
# Rubyではデータ型として、以下の5つの種類があります。
# 1. 整数
# 2. 浮動小数点数
# 3. 文字列
# 4. 真偽値
# 5. nil

# また、他の言語でいう、プリミティブ型と呼ばれるものは、
# Rubyでは、全てオブジェクトとして扱われます。
# そのため、Rubyでは、プリミティブ型と呼ばれるものは、
# ありません。

# 整数は、整数を表すデータ型です。
# 以下のように、整数を表すデータ型を定義することができます。
_integer = 1
puts _integer # => 1

# 浮動小数点数は、小数点以下を含む数値を表すデータ型です。
# 以下のように、浮動小数点数を表すデータ型を定義することができます。
_float = 1.0
puts _float # => 1.0

# 文字列は、文字列を表すデータ型です。
# 以下のように、文字列を表すデータ型を定義することができます。
_string = "Hello World!!!"
puts _string # => Hello World!!!

# また、文字列は、シングルクォートで囲むこともできます。
# 以下のように、シングルクォートで囲んだ文字列を表すデータ型を定義することができます。
_string = 'Hello World!!!'
puts _string # => Hello World!!!

# 文字列内に変数を埋め込むことができます。
# 以下のように、文字列内に変数を埋め込むことができます。
_string = "Hello World!!!"
puts "Hello #{_string}" # => Hello Hello World!!!

# 真偽値は、真か偽かを表すデータ型です。
# 以下のように、真偽値を表すデータ型を定義することができます。
_boolean = true
puts _boolean # => true

# nilは、何もないことを表すデータ型です。
# 以下のように、nilを表すデータ型を定義することができます。
_nil = nil
puts _nil # => nil

# ===== ===== ===== ===== =====

# 高水準なデータ型として、以下のようなものがあります。
# 1. 配列
# 2. ハッシュ
# 3. シンボル
# 4. レンジ
# 5. 正規表現
# 6. 日付

# 配列は、複数のデータを格納することができるデータ型です。
# 以下のように、配列を表すデータ型を定義することができます。
_array = [1, 2, 3]
puts "[1, 2, 3] => #{_array}" # => [1, 2, 3]

# ハッシュは、キーと値のペアを格納することができるデータ型です。
# 以下のように、ハッシュを表すデータ型を定義することができます。
_hash = { "key" => "value" }
puts "{ \"key\" => \"value\" } => #{_hash}" # => { "key" => "value" }

# シンボルは、文字列と同じように扱えるデータ型です。
# 以下のように、シンボルを表すデータ型を定義することができます。
_symbol = :symbol
puts ":symbol => #{_symbol}" # => :symbol

# レンジは、連続した数値を表すデータ型です。
# 以下のように、レンジを表すデータ型を定義することができます。
_range = 1..3
puts "1..3 => #{_range}" # => 1..3

# 正規表現は、文字列のパターンを表すデータ型です。
# 以下のように、正規表現を表すデータ型を定義することができます。
_regexp = /regexp/
puts "/regexp/ => #{_regexp}" # => /regexp/

# 日付は、日付を表すデータ型です。
# 以下のように、日付を表すデータ型を定義することができます。
require 'date'
_date = Date.new(2015, 1, 1)
puts "Date.new(2015, 1, 1) => #{_date}" # => 2015-01-01

# ===== ===== ===== ===== =====

# また、Rubyでは、以下のようなデータ型があります。
# 1. オブジェクト
# 2. クラス
# 3. モジュール
# 4. メソッド
# 5. ブロック

# オブジェクトは、Rubyのデータ型の基本です。
# 以下のように、オブジェクトを表すデータ型を定義することができます。
_object = Object.new
puts "Object.new => #{_object}" # => #<Object:0x007f9b0a0b1c28>

# クラスは、オブジェクトを定義するためのデータ型です。
# 以下のように、クラスを表すデータ型を定義することができます。
_class = Class.new
puts "Class.new => #{_class}" # => Class

# モジュールは、クラスと同じようにオブジェクトを定義するためのデータ型です。
# 以下のように、モジュールを表すデータ型を定義することができます。
_module = Module.new
puts "Module.new => #{_module}" # => #<Module:0x007f9b0a0b1c28>

# メソッドは、オブジェクトの振る舞いを定義するためのデータ型です。
# 以下のように、メソッドを表すデータ型を定義することができます。
_method = method(:puts)
puts "method(:puts) => #{_method}" # => #<Method: Object(Kernel)#puts>

# ブロックは、メソッドの引数として渡すことができるデータ型です。
# 以下のように、ブロックを表すデータ型を定義することができます。
_block = Proc.new { puts "Hello, World!" }
puts "Proc.new { puts \"Hello, World!\" } => #{_block}" # => #<Proc:0x007f9b0a0b1c28>
