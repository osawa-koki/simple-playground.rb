
# Rubyでの変数は以下の2つの種類があります。
# 1. グローバル変数
# 2. ローカル変数

# グローバル変数は、$で始まる変数です。
# グローバル変数は、どこからでも参照できます。
# また、どこからでも変更できます。
# ただし、グローバル変数は、プログラム全体で共有されるため、
# 他のプログラムと変数名が重複すると、意図しない動作をする可能性があります。
# そのため、グローバル変数は、あまり使わない方が良いです。
# $global_variable = "グローバル変数"

# ローカル変数は、変数名の先頭に$をつけない変数です。
# ローカル変数は、その変数が定義されたスコープ内でのみ参照できます。
# また、その変数が定義されたスコープ内でのみ変更できます。
# そのため、ローカル変数は、グローバル変数よりも安全です。
# local_variable = "ローカル変数"

def local_variable_method
  local_variable = "ローカル変数"
  puts local_variable
end

local_variable_method() # => ローカル変数

# グローバル変数は、以下のように、メソッド内で定義することもできます。
def global_variable_method
  $global_variable = "グローバル変数"
  puts $global_variable # => グローバル変数
end

# この段階では、グローバル変数は定義されていません。
puts $global_variable # =>

# メソッドを呼び出すと、グローバル変数が定義されます。
global_variable_method()

# この段階で、グローバル変数が定義されているので、参照できます。
puts $global_variable # => グローバル変数

# ===== ===== ===== ===== =====

# 変数名の先頭を大文字にすると、定数になります。
# 定数は、再代入することができません。
# また、定数は、その定義されたスコープ内でのみ参照できます。
# そのため、定数は、グローバル変数よりも安全です。
# ただし、定数は、再代入することができないため、
# その定数が参照される前に、値が代入されている必要があります。

# 以下のように、定数を定義すると、
# その定数が参照される前に、値が代入されていないため、
# エラーになります。
# puts CONSTANT # => NameError: uninitialized

# 以下のように、定数を定義すると、
# その定数が参照される前に、値が代入されているため、
# エラーになりません。
CONSTANT = "定数"
puts CONSTANT # => 定数
